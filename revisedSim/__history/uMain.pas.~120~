unit uMain;

interface

uses
  SysUtils, Types, UITypes, Classes, Variants, FMX_Types, FMX_Controls, FMX_Forms,
  FMX_Dialogs, FMX_Objects, uSpecies, uReaction, contnrs, FMX_Layouts, FMX_Memo,
  FMX_Edit, FMX_ListBox;

type
  TForm1 = class(TForm)
    PaintBox1: TPaintBox;
    Button1: TButton;
    Panel1: TPanel;
    ListBox1: TListBox;
    Button3: TButton;
    NumberBox1: TNumberBox;
    Button2: TButton;
    procedure Button1Click(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure PaintBox1Paint(Sender: TObject; Canvas: TCanvas);
    procedure PaintBox1MouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Single);
    procedure PaintBox1MouseMove(Sender: TObject; Shift: TShiftState; X,
      Y: Single);
    procedure PaintBox1MouseUp(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Single);
    procedure PaintBox1Click(Sender: TObject);
    procedure Button3Click(Sender: TObject);
    procedure NumberBox1Change(Sender: TObject);
    procedure Button2Click(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
    Species: TSpecies;
    Reaction: TReaction;
    //Lists that containt all the species, reactants, products, & reactions
    SpeciesList: TObjectList;
    ReactantsList: TObjectList;
    ProductsList: TObjectList;
    ReactionsList: TObjectList;
    //String that contains the alphabet, used for naming species
    Alphabet: string;
    //Keeps Track of which species, reactant, product, or reaction is selected
    SpeciesSelectedIndex: integer;
    ReactantSelectedIndex: integer;
    ProductSelectedIndex: integer;
    ReactionSelectedIndex: integer;
    SpeciesMove: Boolean;
    //Keeps track of which list to use ie species, reactnats, or products
    Lists: integer;
    //Keeps track of a selected species location before being moved
    currentX: single;
    currentY: single;
    //Variables used to get around single click actions happening when the
    //user double clicks or moves a species around
    DoubleClick: Boolean;
    MouseMove: Boolean;
    //Local variables used when switching a species between
    //products/reactants and vice versa
    NewName: string;
    Coefficient: integer;
    CoefficientChange: integer;
    //Variables for designating the node width and height
    NodeW: integer;
    NodeH: integer;

  end;

var
  Form1: TForm1;

implementation

{$R *.lfm}

//Function used to determine whether or not the user has selected
//an object that is actually a species
function isSpecies(x, y: single; SpeciesList: TObjectList): integer;
var
  I: integer;
begin
  for I := 0 to SpeciesList.Count-1 do
    if (x > (SpeciesList[I] as TSpecies).x - (SpeciesList[I] as TSpecies).w) and
       (x < (SpeciesList[I] as TSpecies).x + (SpeciesList[I] as TSpecies).w) and
       (y > (SpeciesList[I] as TSpecies).y - (SpeciesList[I] as TSpecies).h) and
       (y < (SpeciesList[I] as TSpecies).y + (SpeciesList[I] as TSpecies).h) then
    begin
      Result := I;
      Exit;
    end
    else
      Result := -1;
  Result := -1;
end;

//Function used to determine whether or not the user has selected
//an object that is actually a reaction
function isReaction(x, y: single; ReactionsList: TObjectList): integer;
var
  I: integer;
begin
  for I := 0 to ReactionsList.Count-1 do
    if (x > (ReactionsList[I] as TReaction).x - (ReactionsList[I] as TReaction).w) and
       (x < (ReactionsList[I] as TReaction).x + (ReactionsList[I] as TReaction).w) and
       (y > (ReactionsList[I] as TReaction).y - (ReactionsList[I] as TReaction).h) and
       (y < (ReactionsList[I] as TReaction).y + (ReactionsList[I] as TReaction).h) then
    begin
      Result := I;
      Exit;
    end
    else
      Result := -1;
  Result := -1;
end;
//Adds a new species to the left hand side
procedure TForm1.Button1Click(Sender: TObject);
begin
  Species := TSpecies.Create(PaintBox1.Width*0.075, 0, NodeW, NodeH, 'A');
  SpeciesList.Add(species);
  SpeciesSelectedIndex := -1;
  Panel1.Visible := False;
  PaintBox1.Repaint;
end;
//Clears the form of an species present
procedure TForm1.Button2Click(Sender: TObject);
var
  I: integer;
begin
  SpeciesList.Clear;
  ReactantsList.Clear;
  ProductsList.Clear;
  Panel1.Visible := False;
  for I := 0 to 4 do
    (ReactionsList[I] as TReaction).RateConstant := 0;
  PaintBox1.Repaint;
end;
//Removes teh panel for a given reaction, however, clicking anywhere
//outside of the panel will accomplish its removal
procedure TForm1.Button3Click(Sender: TObject);
begin
  Panel1.Visible := False;
end;

procedure TForm1.FormCreate(Sender: TObject);
var
  I: integer;
begin
  SpeciesList := TObjectList.Create;
  ReactantsList := TObjectList.Create;
  ProductsList := TObjectList.Create;
  ReactionsList := TObjectList.Create;
  Alphabet := 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
  SpeciesMove := False;
  Panel1.Visible := False;
  NodeW := 30;
  NodeH := 30;
  //SpeciesSelectedIndex := -1;
  ReactantSelectedIndex := -1;
  ProductSelectedIndex := -1;
  ReactionSelectedIndex := -1;
  DoubleClick := False;
  MouseMove := False;
  PaintBox1.Width := Form1.ClientHeight;
  PaintBox1.Height := Form1.ClientWidth*0.85;
  Button1.Height := Form1.ClientWidth*0.1;
  Button2.Height := Form1.ClientWidth*0.1;
  Button1.Position.X := 0;
  Button1.Position.Y := Form1.ClientWidth*0.87;
  Button2.Position.X := Button1.Width;
  Button2.Position.Y := Form1.ClientWidth*0.87;
  for I := 1 to 5 do
    ReactionsList.Add(TReaction.Create(PaintBox1.Width*0.575, PaintBox1.Height*(I/5 - 0.1), NodeW, NodeH, 'R'+IntToStr(I)));
end;

procedure TForm1.NumberBox1Change(Sender: TObject);
begin
  (ReactionsList[ReactionSelectedIndex] as TReaction).RateConstant := NumberBox1.Value;
end;

procedure TForm1.PaintBox1Click(Sender: TObject);
begin
  //Hack to get around the single click action happening when the user double
  //clicks or moves the mouse
  if DoubleClick then
  begin
    DoubleClick := False;
    Exit;
  end;
  //Clicking Increases the coefficient by 1
  {if (ReactantSelectedIndex <> -1) and (MouseMove = False) then
    (ReactantsList[ReactantSelectedIndex] as TSpecies).coefficient :=
        (ReactantsList[ReactantSelectedIndex] as TSpecies).coefficient+1
  else if (ProductSelectedIndex <> -1) and (MouseMove = False) then
    (ProductsList[ProductSelectedIndex] as TSpecies).coefficient :=
        (ProductsList[ProductSelectedIndex] as TSpecies).coefficient+1}
  if ReactionSelectedIndex <> -1 then
  begin
    Panel1.Visible := True;
    NumberBox1.Value := (ReactionsList[ReactionSelectedIndex] as TReaction).RateConstant;
  end;
  MouseMove := False;
end;

procedure TForm1.PaintBox1MouseDown(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Single);
begin
  //Conditional statements to determine whether the user has selected
  //a species from teh left hand side, reactants, products, or reactions
  SpeciesSelectedIndex := -1;
  ReactantSelectedIndex := -1;
  ProductSelectedIndex := -1;
  ReactionSelectedIndex := -1;
  CoefficientChange := -1;
  Panel1.Visible := False;
  //selecting a species from the left hand side
  if x < PaintBox1.Width*0.15 then
  begin
    SpeciesSelectedIndex := isSpecies(x, y, SpeciesList);
    SpeciesMove := True;
  end
  //selecting a species from the reactants
  else if x < PaintBox1.Width*0.5 then
  begin
    ReactantSelectedIndex := isSpecies(x, y, ReactantsList);
    SpeciesMove := True;
    CoefficientChange := isSpecies(x, y+NodeH, ReactantsList);
    if CoefficientChange <> -1 then
      (ReactantsList[CoefficientChange] as TSpecies).coefficient :=
        (ReactantsList[CoefficientChange] as TSpecies).coefficient+1;
    CoefficientChange := isSpecies(x, y-NodeH, ReactantsList);
    if (CoefficientChange <> -1)  and ((ReactantsList[CoefficientChange] as TSpecies).coefficient <> 1) then
      (ReactantsList[CoefficientChange] as TSpecies).coefficient :=
        (ReactantsList[CoefficientChange] as TSpecies).coefficient-1;
  end
  //selecting a reaction
  else if x < PaintBox1.Width*0.65 then
    ReactionSelectedIndex := isReaction(x, y, ReactionsList)
  //selecting a species from the products
  else if x < PaintBox1.Width then
  begin
    ProductSelectedIndex := isSpecies(x, y, ProductsList);
    SpeciesMove := True;
    CoefficientChange := isSpecies(x, y+NodeH, ProductsList);
    if CoefficientChange <> -1 then
      (ProductsList[CoefficientChange] as TSpecies).coefficient :=
        (ProductsList[CoefficientChange] as TSpecies).coefficient+1;
    CoefficientChange := isSpecies(x, y-NodeH, ProductsList);
    if (CoefficientChange <> -1) and ((ProductsList[CoefficientChange] as TSpecies).coefficient <> 1) then
      (ProductsList[CoefficientChange] as TSpecies).coefficient :=
        (ProductsList[CoefficientChange] as TSpecies).coefficient-1;
  end;
  //Keeps track of the selected species original position
  //this is useful when the user does something eratic with the species
  //and for determining which reaction siad species should move to
  if ReactantSelectedIndex <> -1 then
  begin
    SpeciesMove := True;
    currentX := (ReactantsList[ReactantSelectedIndex] as TSpecies).x;
    currentY := (ReactantsList[ReactantSelectedIndex] as TSpecies).y;
  end
  else if SpeciesSelectedIndex <> -1 then
  begin
    SpeciesMove := True;
    currentX := (SpeciesList[SpeciesSelectedIndex] as TSpecies).x;
    currentY := (SpeciesList[SpeciesSelectedIndex] as TSpecies).y;
  end
  else if ProductSelectedIndex <> -1 then
  begin
    SpeciesMove := True;
    currentX := (ProductsList[ProductSelectedIndex] as TSpecies).x;
    currentY := (ProductsList[ProductSelectedIndex] as TSpecies).y;
  end;
end;

procedure TForm1.PaintBox1MouseMove(Sender: TObject; Shift: TShiftState; X,
  Y: Single);
begin
  MouseMove := True;
  if (SpeciesSelectedIndex <> -1) and SpeciesMove then
  begin
    (SpeciesList[SpeciesSelectedIndex] as TSpecies).x := x;
    (SpeciesList[SpeciesSelectedIndex] as TSpecies).y := y;
  end
  else if (ReactantSelectedIndex <> -1) and SpeciesMove then
  begin
    (ReactantsList[ReactantSelectedIndex] as TSpecies).x := x;
    (ReactantsList[ReactantSelectedIndex] as TSpecies).y := y;
  end
  else if (ProductSelectedIndex <> -1) and SpeciesMove then
  begin
    (ProductsList[ProductSelectedIndex] as TSpecies).x := x;
    (ProductsList[ProductSelectedIndex] as TSpecies).y := y;
  end;
  PaintBox1.Repaint;
end;

procedure TForm1.PaintBox1MouseUp(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Single);
var
  I: integer;
begin
  SpeciesMove := False;
  //Moves a species into the reactants area
  if (x > PaintBox1.Width*0.15) and (x < PaintBox1.Width*0.5) then
  begin
    //user is moving a species from the left hand side
    if SpeciesSelectedIndex <> -1 then
    begin
      if y < PaintBox1.Height*0.2 then
        ReactantsList.Add(TSpecies.Create(x, y, NodeW, NodeH, Alphabet[SpeciesSelectedIndex+1], 1, 0))
      else if y < PaintBox1.Height*0.4 then
        ReactantsList.Add(TSpecies.Create(x, y, NodeW, NodeH, Alphabet[SpeciesSelectedIndex+1], 1, 1))
      else if y < PaintBox1.Height*0.6 then
        ReactantsList.Add(TSpecies.Create(x, y, NodeW, NodeH, Alphabet[SpeciesSelectedIndex+1], 1, 2))
      else if y < PaintBox1.Height*0.8 then
        ReactantsList.Add(TSpecies.Create(x, y, NodeW, NodeH, Alphabet[SpeciesSelectedIndex+1], 1, 3))
      else if y < PaintBox1.Height then
        ReactantsList.Add(TSpecies.Create(x, y, NodeW, NodeH, Alphabet[SpeciesSelectedIndex+1], 1, 4));
    end
    //User is moving a species from the products side
    else if ProductSelectedIndex <> -1 then
    begin
      Coefficient := (ProductsList[ProductSelectedIndex] as TSpecies).coefficient;
      NewName := (ProductsList[ProductSelectedIndex] as TSpecies).name;
      ProductsList.Delete(ProductSelectedIndex);
      if y < PaintBox1.Height*0.2 then
        ReactantsList.Add(TSpecies.Create(x, y, NodeW, NodeH, NewName, coefficient, 0))
      else if y < PaintBox1.Height*0.4 then
        ReactantsList.Add(TSpecies.Create(x, y, NodeW, NodeH, NewName, coefficient, 1))
      else if y < PaintBox1.Height*0.6 then
        ReactantsList.Add(TSpecies.Create(x, y, NodeW, NodeH, NewName, coefficient, 2))
      else if y < PaintBox1.Height*0.8 then
        ReactantsList.Add(TSpecies.Create(x, y, NodeW, NodeH, NewName, coefficient, 3))
      else if y < PaintBox1.Height then
        ReactantsList.Add(TSpecies.Create(x, y, NodeW, NodeH, NewName, coefficient, 4));
    end
    //User is moving the species to a different reaction within the reactions
    else if ReactantSelectedIndex <> -1 then
    begin
      if y < PaintBox1.Height*0.2 then
        (ReactantsList[ReactantSelectedIndex] as TSpecies).reaction := 0
      else if y < PaintBox1.Height*0.4 then
        (ReactantsList[ReactantSelectedIndex] as TSpecies).reaction := 1
      else if y < PaintBox1.Height*0.6 then
        (ReactantsList[ReactantSelectedIndex] as TSpecies).reaction := 2
      else if y < PaintBox1.Height*0.8 then
        (ReactantsList[ReactantSelectedIndex] as TSpecies).reaction := 3
      else if y < PaintBox1.Height then
        (ReactantsList[ReactantSelectedIndex] as TSpecies).reaction := 4;
    end;
    if ReactantsList.Count <> 0 then
      for I := 0 to ReactantsList.Count-1 do
        (ReactantsList[I] as TSpecies).y :=
            PaintBox1.Height*(((ReactantsList[I] as TSpecies).reaction+1)/5 - 0.1);
  end
  //moves a species into the products area
  else if x > PaintBox1.Width*0.65 then
  begin
    //Moving a species from the left hand side
    if SpeciesSelectedIndex <> -1 then
    begin
      if Y < PaintBox1.Height*0.2 then
        ProductsList.Add(TSpecies.Create(x, y, NodeW, NodeH, Alphabet[SpeciesSelectedIndex+1], 1, 0))
      else if y < PaintBox1.Height*0.4 then
        ProductsList.Add(TSpecies.Create(x, y, NodeW, NodeH, Alphabet[SpeciesSelectedIndex+1], 1, 1))
      else if y < PaintBox1.Height*0.6 then
        ProductsList.Add(TSpecies.Create(x, y, NodeW, NodeH, Alphabet[SpeciesSelectedIndex+1], 1, 2))
      else if y < PaintBox1.Height*0.8 then
        ProductsList.Add(TSpecies.Create(x, y, NodeW, NodeH, Alphabet[SpeciesSelectedIndex+1], 1, 3))
      else if y < PaintBox1.Height then
        ProductsList.Add(TSpecies.Create(x, y, NodeW, NodeH, Alphabet[SpeciesSelectedIndex+1], 1, 4));
    end
    //Moving a Reactant to the products
    else if ReactantSelectedIndex <> -1 then
    begin
      NewName := (ReactantsList[ReactantSelectedIndex] as TSpecies).name;
      Coefficient := (ReactantsList[ReactantSelectedIndex] as TSpecies).coefficient;
      ReactantsList.Delete(ReactantSelectedIndex);
      if Y < PaintBox1.Height*0.2 then
        ProductsList.Add(TSpecies.Create(x, y, NodeW, NodeH, NewName, coefficient, 0))
      else if y < PaintBox1.Height*0.4 then
        ProductsList.Add(TSpecies.Create(x, y, NodeW, NodeH, NewName, coefficient, 1))
      else if y < PaintBox1.Height*0.6 then
        ProductsList.Add(TSpecies.Create(x, y, NodeW, NodeH, NewName, coefficient, 2))
      else if y < PaintBox1.Height*0.8 then
        ProductsList.Add(TSpecies.Create(x, y, NodeW, NodeH, NewName, coefficient, 3))
      else if y < PaintBox1.Height*0.8 then
        ProductsList.Add(TSpecies.Create(x, y, NodeW, NodeH, NewName, coefficient, 4));
    end
    //Moving a species within the products side
    else if ProductSelectedIndex <> -1 then
    begin
      if y < PaintBox1.Height*0.2 then
        (ProductsList[ProductSelectedIndex] as TSpecies).reaction := 0
      else if y < PaintBox1.Height*0.4 then
        (ProductsList[ProductSelectedIndex] as TSpecies).reaction := 1
      else if y < PaintBox1.Height*0.6 then
        (ProductsList[ProductSelectedIndex] as TSpecies).reaction := 2
      else if y < PaintBox1.Height*0.8 then
        (ProductsList[ProductSelectedIndex] as TSpecies).reaction := 3
      else if y < PaintBox1.Height then
        (ProductsList[ProductSelectedIndex] as TSpecies).reaction := 4
    end;
    if ProductsList.Count <> 0 then
      for I := 0 to ProductsList.Count-1 do
        (ProductsList[I] as TSpecies).y :=
            PaintBox1.Height*(((ProductsList[I] as TSpecies).reaction+1)/5 - 0.1);
  end
  //Moves a species into the reactions area
  else if (x > PaintBox1.Width*0.5) and (x < PaintBox1.Width*0.65) then
  begin
    if ReactantSelectedIndex <> -1 then
    begin
      (ReactantsList[ReactantSelectedIndex] as TSpecies).x := currentX;
      (ReactantsList[ReactantSelectedIndex] as TSpecies).y := currentY;
    end
    else if ProductSelectedIndex <> -1 then
    begin
      (ProductsList[ProductSelectedIndex] as TSpecies).x := currentX;
      (ProductsList[ProductSelectedIndex] as TSpecies).y := currentY;
    end;
  end
  //Moves a species into the left hand area
  else if x < PaintBox1.Width*0.15 then
  begin
    if ReactantSelectedIndex <> -1 then
    begin
      ReactantsList.Delete(ReactantSelectedIndex);
      {(ReactantsList[ReactantSelectedIndex] as TSpecies).x := currentX;
      (ReactantsList[ReactantSelectedIndex] as TSpecies).y := currentY; }
    end
    else if ProductSelectedIndex <> -1 then
    begin
      ProductsList.Delete(ProductSelectedIndex);
      {(ProductsList[ProductSelectedIndex] as TSpecies).x := currentX;
      (ProductsList[ProductSelectedIndex] as TSpecies).y := currentY;}
    end;
  end;
  //Resets the coords if the left species was selected and moved
  if SpeciesSelectedIndex <> -1 then
  begin
    (SpeciesList[SpeciesSelectedIndex] as TSpecies).x := currentX;
    (SpeciesList[SpeciesSelectedIndex] as TSpecies).y := currentY;
  end;
  PaintBox1.Repaint;
end;

procedure TForm1.PaintBox1Paint(Sender: TObject; Canvas: TCanvas);
var
  I: integer;
begin
  //Draws All the species on the left side
  if SpeciesSelectedIndex = -1 then
  begin
    for I := 0 to SpeciesList.Count-1 do
    begin
      (SpeciesList[I] as TSpecies).y := PaintBox1.Height/SpeciesList.Count/2 + Paintbox1.Height/SpeciesList.Count*I;
      (SpeciesList[I] as TSpecies).x := Paintbox1.Width*0.075;
      (SpeciesList[I] as Tspecies).name := Alphabet[I+1];
      (SpeciesList[I] as TSpecies).paint(Canvas);
    end;
  end
  else
  begin
    for I := 0 to SpeciesList.Count-1 do
      (SpeciesList[I] as TSpecies).paint(Canvas);
  end;
  //Draws the reaction arrows
  for I := 0 to ReactionsList.Count-1 do
      (ReactionsList[I] as TReaction).paint(Canvas);
  //Draws the Reactants
  if ReactantsList.Count <> 0 then
    for I := 0 to ReactantsList.Count-1 do
    begin
      (ReactantsList[I] as TSpecies).paint(Canvas);
      (ReactantsList[I] as TSpecies).paintCoefficients(Canvas);
    end;
  //Draws the Products
  if ProductsList.Count <> 0 then
    for I := 0 to ProductsList.Count-1 do
    begin
      (ProductsList[I] as TSpecies).paint(Canvas);
      (ProductsList[I] as TSpecies).paintCoefficients(Canvas);
    end;
end;

end.
